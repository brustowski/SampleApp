// Generated Time: 02/05/2021 14:57:21
// Generated By: AIKravchenko

namespace FilingPortal.Parts.Zones.Ftz214.DataLayer.Migrations
{
    using FilingPortal.Parts.Common.DataLayer.Base;
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class csfp_17_add_inbound_tables : FpMigration
    {
        public override void Up()
        {
            CreateTable(
                "zones_ftz214.document",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        content = c.Binary(),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                        document_type = c.String(maxLength: 128, unicode: false),
                        description = c.String(maxLength: 1000, unicode: false),
                        extension = c.String(nullable: false, maxLength: 128, unicode: false),
                        file_name = c.String(nullable: false, maxLength: 255, unicode: false),
                        filing_header_id = c.Int(),
                        inbound_record_id = c.Int(),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_ftz214.filing_header", t => t.filing_header_id)
                .ForeignKey("zones_ftz214.inbound", t => t.inbound_record_id, cascadeDelete: true)
                .Index(t => t.filing_header_id)
                .Index(t => t.inbound_record_id);
            
            CreateTable(
                "zones_ftz214.filing_header",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        job_status = c.Int(),
                        entry_status = c.String(maxLength: 128, unicode: false),
                        last_modified_date = c.DateTime(),
                        last_modified_user = c.String(maxLength: 128, unicode: false),
                        filing_number = c.String(maxLength: 255, unicode: false),
                        job_link = c.String(maxLength: 8000, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id);
            
            CreateTable(
                "zones_ftz214.inbound",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        applicant_id = c.Guid(),
                        ein = c.String(maxLength: 128, unicode: false),
                        ftz_operator_id = c.Guid(),
                        zone_id = c.String(maxLength: 128, unicode: false),
                        admission_type = c.String(maxLength: 128, unicode: false),
                        xml_file = c.Binary(),
                        xml_file_name = c.String(maxLength: 128, unicode: false),
                        is_update = c.Boolean(nullable: false),
                        is_auto = c.Boolean(nullable: false),
                        is_auto_processed = c.Boolean(nullable: false),
                        validation_passed = c.Boolean(nullable: false),
                        validation_result = c.String(maxLength: 128, unicode: false),
                        modified_date = c.DateTime(nullable: false),
                        modified_user = c.String(maxLength: 128, unicode: false),
                        deleted = c.Boolean(nullable: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("dbo.Clients", t => t.applicant_id)
                .ForeignKey("dbo.Clients", t => t.ftz_operator_id)
                .Index(t => t.applicant_id)
                .Index(t => t.ftz_operator_id);
            
            CreateTable(
                "zones_ftz214.inbound_parsed_data",
                c => new
                    {
                        id = c.Int(nullable: false),
                        inbound_record_id = c.Int(nullable: false),
                        company_code = c.String(maxLength: 10, unicode: false),
                        office_code = c.String(maxLength: 10, unicode: false),
                        file_no = c.String(maxLength: 9, unicode: false),
                        filer_code = c.String(maxLength: 3, unicode: false),
                        record_exists_action = c.String(maxLength: 1, unicode: false),
                        partner_key = c.String(maxLength: 35, unicode: false),
                        partner_key2 = c.String(maxLength: 20, unicode: false),
                        partner_key3 = c.String(maxLength: 20, unicode: false),
                        partner_key4 = c.String(maxLength: 20, unicode: false),
                        admission_no = c.String(maxLength: 8, unicode: false),
                        admission_year = c.String(maxLength: 2, unicode: false),
                        zone_no = c.String(maxLength: 7, unicode: false),
                        zone_port = c.String(maxLength: 4, unicode: false),
                        firms = c.String(maxLength: 128, unicode: false),
                        direct_delivery = c.String(maxLength: 1, unicode: false),
                        abi_routing = c.String(maxLength: 9, unicode: false),
                        submitter_irs_no = c.String(maxLength: 12, unicode: false),
                        applicant_irs_no = c.String(maxLength: 12, unicode: false),
                        sent_to_census = c.String(maxLength: 1, unicode: false),
                        authorized_goods_desc = c.String(maxLength: 360, unicode: false),
                        exceptions_exist = c.String(maxLength: 1, unicode: false),
                        except_goods_desc = c.String(maxLength: 360, unicode: false),
                        conv_no = c.Int(),
                        admission_type = c.String(maxLength: 1, unicode: false),
                        unlading_port = c.String(maxLength: 4, unicode: false),
                        mot = c.String(maxLength: 2, unicode: false),
                        imp_carrier_code = c.String(maxLength: 4, unicode: false),
                        imp_carrier_name = c.String(maxLength: 23, unicode: false),
                        imp_vessel = c.String(maxLength: 23, unicode: false),
                        imp_vessel_country_code = c.String(maxLength: 2, unicode: false),
                        flt_voy_trip = c.String(maxLength: 15, unicode: false),
                        export_date = c.DateTime(),
                        import_date = c.DateTime(),
                        est_arr_date = c.DateTime(),
                        user_provided_sf_transaction_no = c.String(maxLength: 15, unicode: false),
                        rcpt_rpr_date = c.DateTime(),
                        filing_status = c.String(maxLength: 128, unicode: false),
                        ptt_firms = c.String(maxLength: 4, unicode: false),
                        ptt_irs_no = c.String(maxLength: 12, unicode: false),
                        it_no = c.String(maxLength: 35, unicode: false),
                        it_date = c.DateTime(),
                        it_carrier_code = c.String(maxLength: 4, unicode: false),
                        it_carrier_name = c.String(maxLength: 35, unicode: false),
                        it_from_port = c.String(maxLength: 4, unicode: false),
                        it_from_zone_no = c.String(maxLength: 7, unicode: false),
                        line_no = c.Int(),
                        master = c.String(maxLength: 35, unicode: false),
                        house = c.String(maxLength: 20, unicode: false),
                        qty = c.Int(),
                        qtyuom = c.String(maxLength: 15, unicode: false),
                        ce = c.String(maxLength: 2, unicode: false),
                        foreign_port = c.String(maxLength: 5, unicode: false),
                        foreign_port_code = c.String(maxLength: 5, unicode: false),
                        foreign_port_name = c.String(maxLength: 35, unicode: false),
                        bta_indicator = c.String(maxLength: 1, unicode: false),
                        container = c.String(maxLength: 8000, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_ftz214.inbound", t => t.id, cascadeDelete: true)
                .Index(t => t.id);
            
            CreateTable(
                "zones_ftz214.inbound_parsed_line",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        inbound_record_id = c.Int(nullable: false),
                        item_no = c.Int(),
                        sub_item = c.String(maxLength: 1, unicode: false),
                        hts = c.String(maxLength: 10, unicode: false),
                        additional_hts = c.String(maxLength: 10, unicode: false),
                        spi1 = c.String(maxLength: 1, unicode: false),
                        spi1_country = c.String(maxLength: 2, unicode: false),
                        spi2 = c.String(maxLength: 1, unicode: false),
                        qty1 = c.Decimal(precision: 18, scale: 6),
                        qty1uom = c.String(maxLength: 3, unicode: false),
                        qty2 = c.Decimal(precision: 18, scale: 6),
                        qty2uom = c.String(maxLength: 3, unicode: false),
                        category_no = c.String(maxLength: 3, unicode: false),
                        co = c.String(maxLength: 2, unicode: false),
                        mid = c.String(maxLength: 15, unicode: false),
                        value = c.Int(),
                        additional_hts_value = c.Int(),
                        gross_wgt = c.Int(),
                        gross_lbs = c.Int(),
                        charges = c.Int(),
                        hmf = c.Decimal(precision: 18, scale: 6),
                        zone_status = c.String(maxLength: 1, unicode: false),
                        mx_cement_license_no = c.String(maxLength: 6, unicode: false),
                        pn_disclaimer = c.String(maxLength: 1, unicode: false),
                        importer_acctno = c.String(maxLength: 6, unicode: false),
                        importer_acct = c.String(maxLength: 6, unicode: false),
                        importer_irsno = c.String(maxLength: 12, unicode: false),
                        product_name = c.String(maxLength: 35, unicode: false),
                        product_country = c.String(maxLength: 2, unicode: false),
                        product_qty = c.Decimal(precision: 18, scale: 6),
                        description = c.String(maxLength: 8000, unicode: false),
                        remarks = c.String(maxLength: 8000, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_ftz214.inbound", t => t.inbound_record_id, cascadeDelete: true)
                .Index(t => t.inbound_record_id);
            
            CreateTable(
                "zones_ftz214.form_configuration",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        section_id = c.Int(nullable: false),
                        depends_on_id = c.Int(),
                        confirmation_needed = c.Boolean(nullable: false),
                        column_name = c.String(nullable: false, maxLength: 128, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                        display_on_ui = c.Byte(nullable: false),
                        manual = c.Byte(nullable: false),
                        editable = c.Boolean(nullable: false),
                        mandatory = c.Boolean(nullable: false),
                        single_filing_order = c.Byte(),
                        description = c.String(maxLength: 128, unicode: false),
                        label = c.String(nullable: false, maxLength: 128, unicode: false),
                        paired_field_table = c.String(maxLength: 128, unicode: false),
                        paired_field_column = c.String(maxLength: 128, unicode: false),
                        handbook_name = c.String(maxLength: 128, unicode: false),
                        has_default_value = c.Boolean(nullable: false),
                        overridden_type = c.String(maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_ftz214.form_section_configuration", t => t.section_id)
                .Index(t => t.section_id);
            
            CreateTable(
                "zones_ftz214.form_section_configuration",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        name = c.String(nullable: false, maxLength: 128, unicode: false),
                        title = c.String(nullable: false, maxLength: 128, unicode: false),
                        table_name = c.String(maxLength: 128, unicode: false),
                        procedure_name = c.String(maxLength: 128, unicode: false),
                        is_array = c.Boolean(nullable: false),
                        display_as_grid = c.Boolean(nullable: false),
                        is_hidden = c.Boolean(nullable: false),
                        parent_id = c.Int(),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_ftz214.form_section_configuration", t => t.parent_id)
                .Index(t => t.name, unique: true)
                .Index(t => t.parent_id);
            
            CreateTable(
                "zones_ftz214.inbound_xml",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        file_name = c.String(nullable: false, maxLength: 128, unicode: false),
                        content = c.Binary(nullable: false),
                        status = c.Int(nullable: false),
                        validation_result = c.String(maxLength: 1000, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id);
            
            CreateTable(
                "zones_ftz214.filing_detail",
                c => new
                    {
                        filing_header_id = c.Int(nullable: false),
                        inbound_id = c.Int(nullable: false),
                    })
                .PrimaryKey(t => new { t.filing_header_id, t.inbound_id })
                .ForeignKey("zones_ftz214.filing_header", t => t.filing_header_id, cascadeDelete: true)
                .ForeignKey("zones_ftz214.inbound", t => t.inbound_id, cascadeDelete: true)
                .Index(t => t.filing_header_id)
                .Index(t => t.inbound_id);
            
            ExecuteSqlFileUp();
        }
        
        public override void Down()
        {
            ExecuteSqlFileDown();

            DropForeignKey("zones_ftz214.form_configuration", "section_id", "zones_ftz214.form_section_configuration");
            DropForeignKey("zones_ftz214.form_section_configuration", "parent_id", "zones_ftz214.form_section_configuration");
            DropForeignKey("zones_ftz214.document", "inbound_record_id", "zones_ftz214.inbound");
            DropForeignKey("zones_ftz214.document", "filing_header_id", "zones_ftz214.filing_header");
            DropForeignKey("zones_ftz214.filing_detail", "inbound_id", "zones_ftz214.inbound");
            DropForeignKey("zones_ftz214.filing_detail", "filing_header_id", "zones_ftz214.filing_header");
            DropForeignKey("zones_ftz214.inbound_parsed_line", "inbound_record_id", "zones_ftz214.inbound");
            DropForeignKey("zones_ftz214.inbound_parsed_data", "id", "zones_ftz214.inbound");
            DropForeignKey("zones_ftz214.inbound", "ftz_operator_id", "dbo.Clients");
            DropForeignKey("zones_ftz214.inbound", "applicant_id", "dbo.Clients");
            DropIndex("zones_ftz214.filing_detail", new[] { "inbound_id" });
            DropIndex("zones_ftz214.filing_detail", new[] { "filing_header_id" });
            DropIndex("zones_ftz214.form_section_configuration", new[] { "parent_id" });
            DropIndex("zones_ftz214.form_section_configuration", new[] { "name" });
            DropIndex("zones_ftz214.form_configuration", new[] { "section_id" });
            DropIndex("zones_ftz214.inbound_parsed_line", new[] { "inbound_record_id" });
            DropIndex("zones_ftz214.inbound_parsed_data", new[] { "id" });
            DropIndex("zones_ftz214.inbound", new[] { "ftz_operator_id" });
            DropIndex("zones_ftz214.inbound", new[] { "applicant_id" });
            DropIndex("zones_ftz214.document", new[] { "inbound_record_id" });
            DropIndex("zones_ftz214.document", new[] { "filing_header_id" });
            DropTable("zones_ftz214.filing_detail");
            DropTable("zones_ftz214.inbound_xml");
            DropTable("zones_ftz214.form_section_configuration");
            DropTable("zones_ftz214.form_configuration");
            DropTable("zones_ftz214.inbound_parsed_line");
            DropTable("zones_ftz214.inbound_parsed_data");
            DropTable("zones_ftz214.inbound");
            DropTable("zones_ftz214.filing_header");
            DropTable("zones_ftz214.document");
        }
    }
}

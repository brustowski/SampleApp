// Generated Time: 09/22/2020 16:38:50
// Generated By: iapetrov

namespace FilingPortal.Parts.Zones.Entry.DataLayer.Migrations
{
    using FilingPortal.Parts.Common.DataLayer.Base;
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class cbdev_3318_add_entry_06 : FpMigration
    {
        public override void Up()
        {
            CreateTable(
                "zones_entry.document",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        content = c.Binary(),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                        document_type = c.String(maxLength: 128, unicode: false),
                        description = c.String(maxLength: 1000, unicode: false),
                        extension = c.String(nullable: false, maxLength: 128, unicode: false),
                        file_name = c.String(nullable: false, maxLength: 255, unicode: false),
                        filing_header_id = c.Int(),
                        inbound_record_id = c.Int(),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_entry.filing_header", t => t.filing_header_id)
                .ForeignKey("zones_entry.inbound", t => t.inbound_record_id, cascadeDelete: true)
                .Index(t => t.filing_header_id)
                .Index(t => t.inbound_record_id);
            
            CreateTable(
                "zones_entry.filing_header",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        mapping_status = c.Byte(),
                        filing_status = c.Byte(),
                        entry_status = c.String(maxLength: 128, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                        filing_number = c.String(maxLength: 255, unicode: false),
                        job_link = c.String(maxLength: 8000, unicode: false),
                    })
                .PrimaryKey(t => t.id);
            
            CreateTable(
                "zones_entry.inbound",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        importer_id = c.Guid(nullable: false),
                        entry_port = c.String(maxLength: 4, unicode: false),
                        arrival_date = c.DateTime(),
                        firms_code = c.String(maxLength: 128, unicode: false),
                        owner_ref = c.String(maxLength: 128, unicode: false),
                        filer_code = c.String(maxLength: 128, unicode: false),
                        entry_no = c.String(maxLength: 7, unicode: false),
                        check_digit = c.String(maxLength: 128, unicode: false),
                        entry_type = c.String(maxLength: 2, unicode: false),
                        vessel_name = c.String(maxLength: 128, unicode: false),
                        import_date = c.DateTime(),
                        team_no = c.String(maxLength: 128, unicode: false),
                        summary_date = c.DateTime(),
                        statement_date = c.DateTime(),
                        nafta_recon = c.String(maxLength: 128, unicode: false),
                        recon_issue = c.String(maxLength: 128, unicode: false),
                        ultimate_destination_state = c.String(maxLength: 128, unicode: false),
                        unlading_port = c.String(maxLength: 128, unicode: false),
                        application_begin_date = c.DateTime(),
                        application_end_date = c.DateTime(),
                        nafta_deferred = c.String(maxLength: 128, unicode: false),
                        live_entry_flag = c.String(maxLength: 128, unicode: false),
                        ach = c.String(maxLength: 128, unicode: false),
                        paperless_flag = c.String(maxLength: 128, unicode: false),
                        prorate_weight = c.String(maxLength: 128, unicode: false),
                        total_entered_value = c.Decimal(precision: 18, scale: 6),
                        merchandise_description3461 = c.String(maxLength: 128, unicode: false),
                        surcharge_flag = c.String(maxLength: 128, unicode: false),
                        government_contract_flag = c.String(maxLength: 128, unicode: false),
                        gross_wgt = c.String(maxLength: 128, unicode: false),
                        freight_charges_advanced = c.Decimal(precision: 18, scale: 6),
                        freight_charges_not_advanced = c.Decimal(precision: 18, scale: 6),
                        importer_of_record_declaration = c.String(maxLength: 128, unicode: false),
                        purchase_agreement_declaration = c.String(maxLength: 128, unicode: false),
                        created_date_time = c.DateTime(),
                        calculate_duty_fees = c.String(maxLength: 128, unicode: false),
                        duty_amount = c.Decimal(precision: 18, scale: 6),
                        mpf_amount = c.Decimal(precision: 18, scale: 6),
                        total_value = c.Decimal(precision: 18, scale: 6),
                        total_fee_amount = c.Decimal(precision: 18, scale: 6),
                        total_amount_due = c.Decimal(precision: 18, scale: 6),
                        currency_code = c.String(maxLength: 128, unicode: false),
                        deleted = c.Boolean(nullable: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("dbo.Clients", t => t.importer_id)
                .Index(t => t.importer_id);
            
            CreateTable(
                "zones_entry.inbound_lines",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        item_no = c.Int(nullable: false),
                        item_value = c.Decimal(nullable: false, precision: 18, scale: 6),
                        hts = c.String(maxLength: 128, unicode: false),
                        country_of_origin = c.String(maxLength: 128, unicode: false),
                        manufacturers_id_no = c.String(maxLength: 128, unicode: false),
                        ftz_manifest_qty = c.Decimal(nullable: false, precision: 18, scale: 6),
                        ftz_status = c.String(maxLength: 128, unicode: false),
                        ftz_date = c.DateTime(),
                        product_name = c.String(maxLength: 128, unicode: false),
                        inbound_record_id = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_entry.inbound", t => t.inbound_record_id, cascadeDelete: true)
                .Index(t => t.inbound_record_id);
            
            CreateTable(
                "zones_entry.form_configuration",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        section_id = c.Int(nullable: false),
                        depends_on_id = c.Int(),
                        confirmation_needed = c.Boolean(nullable: false),
                        column_name = c.String(nullable: false, maxLength: 128, unicode: false),
                        created_date = c.DateTime(nullable: false, defaultValueSql: "GETDATE()"),
                        created_user = c.String(nullable: false, maxLength: 128, unicode: false, defaultValueSql: "SUSER_NAME()"),
                        display_on_ui = c.Byte(nullable: false),
                        manual = c.Byte(nullable: false),
                        editable = c.Boolean(nullable: false),
                        mandatory = c.Boolean(nullable: false),
                        single_filing_order = c.Byte(),
                        description = c.String(maxLength: 128, unicode: false),
                        label = c.String(nullable: false, maxLength: 128, unicode: false),
                        paired_field_table = c.String(maxLength: 128, unicode: false),
                        paired_field_column = c.String(maxLength: 128, unicode: false),
                        handbook_name = c.String(maxLength: 128, unicode: false),
                        has_default_value = c.Boolean(nullable: false),
                        overridden_type = c.String(maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_entry.form_section_configuration", t => t.section_id)
                .Index(t => t.section_id);
            
            CreateTable(
                "zones_entry.form_section_configuration",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        name = c.String(nullable: false, maxLength: 128, unicode: false),
                        title = c.String(nullable: false, maxLength: 128, unicode: false),
                        table_name = c.String(maxLength: 128, unicode: false),
                        procedure_name = c.String(maxLength: 128, unicode: false),
                        is_array = c.Boolean(nullable: false),
                        display_as_grid = c.Boolean(nullable: false),
                        is_hidden = c.Boolean(nullable: false),
                        parent_id = c.Int(),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("zones_entry.form_section_configuration", t => t.parent_id)
                .Index(t => t.name, unique: true)
                .Index(t => t.parent_id);
            
            
            
            CreateTable(
                "zones_entry.rule_importer",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        importer_id = c.Guid(nullable: false),
                        rlf = c.String(maxLength: 128, unicode: false),
                        enable_cargo_release = c.Boolean(nullable: false),
                        ftz_no = c.String(maxLength: 128, unicode: false),
                        f3461_box29 = c.String(maxLength: 128, unicode: false),
                        manifest_qty = c.Decimal(precision: 18, scale: 6),
                        uq = c.String(maxLength: 128, unicode: false),
                        invoice_no = c.String(maxLength: 128, unicode: false),
                        manufacturer = c.String(maxLength: 128, unicode: false),
                        supplier = c.String(maxLength: 128, unicode: false),
                        seller = c.String(maxLength: 128, unicode: false),
                        sold_to_party = c.String(maxLength: 128, unicode: false),
                        ship_to_party = c.String(maxLength: 128, unicode: false),
                        invoice_qty_uq = c.String(maxLength: 128, unicode: false),
                        ftz_pack_qty_uq = c.String(maxLength: 128, unicode: false),
                        goods_description = c.String(maxLength: 128, unicode: false),
                        epa_tsca = c.String(maxLength: 128, unicode: false),
                        tsca_cert_indicator = c.String(maxLength: 128, unicode: false),
                        certifying_individual = c.String(maxLength: 128, unicode: false),
                        entry_date_election_code = c.String(maxLength: 128, unicode: false),
                        recon_issue = c.String(maxLength: 128, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id)
                .ForeignKey("dbo.Clients", t => t.importer_id)
                .Index(t => t.importer_id);
            
            CreateTable(
                "zones_entry.inbound_xmls",
                c => new
                    {
                        id = c.Int(nullable: false, identity: true),
                        file_name = c.String(nullable: false, maxLength: 128, unicode: false),
                        content = c.Binary(nullable: false),
                        status = c.Int(nullable: false),
                        validation_result = c.String(maxLength: 1000, unicode: false),
                        created_date = c.DateTime(nullable: false),
                        created_user = c.String(maxLength: 128, unicode: false),
                    })
                .PrimaryKey(t => t.id);
            
            CreateTable(
                "zones_entry.filing_detail",
                c => new
                    {
                        filing_header_id = c.Int(nullable: false),
                        inbound_id = c.Int(nullable: false),
                    })
                .PrimaryKey(t => new { t.filing_header_id, t.inbound_id })
                .ForeignKey("zones_entry.filing_header", t => t.filing_header_id, cascadeDelete: true)
                .ForeignKey("zones_entry.inbound", t => t.inbound_id, cascadeDelete: true)
                .Index(t => t.filing_header_id)
                .Index(t => t.inbound_id);
            
            ExecuteSqlFileUp();
        }
        
        public override void Down()
        {
            DropForeignKey("zones_entry.rule_importer", "importer_id", "dbo.Clients");
            DropForeignKey("zones_entry.form_configuration", "section_id", "zones_entry.form_section_configuration");
            DropForeignKey("zones_entry.form_section_configuration", "parent_id", "zones_entry.form_section_configuration");
            DropForeignKey("zones_entry.document", "inbound_record_id", "zones_entry.inbound");
            DropForeignKey("zones_entry.document", "filing_header_id", "zones_entry.filing_header");
            DropForeignKey("zones_entry.filing_detail", "inbound_id", "zones_entry.inbound");
            DropForeignKey("zones_entry.filing_detail", "filing_header_id", "zones_entry.filing_header");
            DropForeignKey("zones_entry.inbound_lines", "inbound_record_id", "zones_entry.inbound");
            DropForeignKey("zones_entry.inbound", "importer_id", "dbo.Clients");
            DropIndex("zones_entry.filing_detail", new[] { "inbound_id" });
            DropIndex("zones_entry.filing_detail", new[] { "filing_header_id" });
            DropIndex("zones_entry.rule_importer", new[] { "importer_id" });
            DropIndex("zones_entry.form_section_configuration", new[] { "parent_id" });
            DropIndex("zones_entry.form_section_configuration", new[] { "name" });
            DropIndex("zones_entry.form_configuration", new[] { "section_id" });
            DropIndex("zones_entry.inbound_lines", new[] { "inbound_record_id" });
            DropIndex("zones_entry.inbound", new[] { "importer_id" });
            DropIndex("zones_entry.document", new[] { "inbound_record_id" });
            DropIndex("zones_entry.document", new[] { "filing_header_id" });
            DropTable("zones_entry.filing_detail");
            DropTable("zones_entry.inbound_xmls");
            DropTable("zones_entry.rule_importer");
            DropTable("zones_entry.form_section_configuration");
            DropTable("zones_entry.form_configuration");
            DropTable("zones_entry.inbound_lines");
            DropTable("zones_entry.inbound");
            DropTable("zones_entry.filing_header");
            DropTable("zones_entry.document");

            ExecuteSqlFileDown();
        }
    }
}
